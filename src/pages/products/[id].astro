---
import Layout from '../../layouts/Layout.astro';
import Navbar from '../../components/Navbar.astro';
import Footer from '../../components/Footer.astro';
import ProductCard from '../../components/ProductCard.astro';
import ContactModal from '../../components/ContactModal.astro';
import { getAllProducts, getAllCategories, getProductById, getCategoryById } from '../../lib/firestore.js';

// Generate static paths for all products
export async function getStaticPaths() {
  try {
    console.log("Generating static paths for product pages...");
    
    // Wrap in Promise.resolve to handle rejections properly
    const [products, categories] = await Promise.all([
      Promise.resolve(getAllProducts()).catch(() => [{
        id: "demo-product",
        name: "Demo Product", 
        description: "Demo product description",
        serialNumber: "DEMO001",
        image: "https://images.pexels.com/photos/4386467/pexels-photo-4386467.jpeg?auto=compress&cs=tinysrgb&w=800",
        category: "demo-category",
        variations: []
      }]),
      Promise.resolve(getAllCategories()).catch(() => [{
        id: "demo-category",
        name: "Demo Category",
        description: "Demo category",
        image: "https://images.pexels.com/photos/4386467/pexels-photo-4386467.jpeg?auto=compress&cs=tinysrgb&w=800"
      }])
    ]);
    
    console.log(`Generating paths for ${products.length} products`);
    
    // Create a map of categories for easy lookup
    const categoryMap = {};
    categories.forEach(cat => {
      categoryMap[cat.id] = cat;
    });
    
    return products.map((product) => {
      // Get category ID from categoryRef
      const categoryId = product.categoryRef?.path?.split('/').pop() || product.category;
      const category = categoryMap[categoryId];
      
      // Get related products from same category
      const relatedProducts = products
        .filter(p => {
          const pCategoryId = p.categoryRef?.path?.split('/').pop() || p.category;
          return pCategoryId === categoryId && p.id !== product.id;
        })
        .slice(0, 3); // Limit to 3 related products
      
      return {
        params: { id: product.id },
        props: { 
          product,
          category: category || { id: categoryId, name: 'Unknown Category', description: '', image: '' },
          relatedProducts
        }
      };
    });
  } catch (error) {
    console.error('Error generating static paths:', error);
    // Always return at least one path to prevent build failure
    return [
      {
        params: { id: 'demo-product' },
        props: {
          product: {
            id: 'demo-product',
            name: 'Demo Product',
            description: 'Demo product description',
            serialNumber: 'DEMO001',
            image: 'https://images.pexels.com/photos/4386467/pexels-photo-4386467.jpeg?auto=compress&cs=tinysrgb&w=800',
            variations: []
          },
          category: {
            id: 'demo-category',
            name: 'Demo Category',
            description: 'Demo category',
            image: 'https://images.pexels.com/photos/4386467/pexels-photo-4386467.jpeg?auto=compress&cs=tinysrgb&w=800'
          },
          relatedProducts: []
        }
      }
    ];
  }
}

const { product, category, relatedProducts } = Astro.props;

// Generate structured data for SEO
const structuredData = {
  "@context": "https://schema.org/",
  "@type": "Product",
  "name": product.name,
  "description": product.description,
  "image": product.image,
  "sku": product.serialNumber,
  "category": category.name,
  "manufacturer": {
    "@type": "Organization",
    "name": "Swiss Trade Ventures"
  }
};
---

<Layout 
  title={`${product.name} - Medical Equipment | Swiss Trade Ventures`}
  description={`${product.description} - Professional medical equipment with serial number ${product.serialNumber}. View detailed specifications and training applications.`}
>
  <!-- Structured Data for SEO -->
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)}></script>
  
  <Navbar />
  
  <!-- Main Product Detail Content -->
  <div class="min-h-screen bg-white pt-48 lg:pt-40 pb-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <!-- Breadcrumb Navigation -->
      <nav class="mb-8" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-3 text-sm">
          <li>
            <a href="/" class="text-gray-500 hover:text-gray-700 transition-colors duration-300 font-medium">
              Home
            </a>
          </li>
          <li class="flex items-center">
            <svg class="w-4 h-4 text-gray-300 mx-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
            <a href="/products" class="text-gray-500 hover:text-gray-700 transition-colors duration-300 font-medium">
              Products
            </a>
          </li>
          <li class="flex items-center">
            <svg class="w-4 h-4 text-gray-300 mx-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
            <span class="text-gray-500">{category.name}</span>
          </li>
          <li class="flex items-center">
            <svg class="w-4 h-4 text-gray-300 mx-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
            <span class="text-gray-900 font-semibold">{product.name}</span>
          </li>
        </ol>
      </nav>

      <!-- Back to Products Link -->
      <div class="mb-8">
        <a 
          href="/products" 
          class="inline-flex items-center text-sm font-medium transition-colors duration-200"
          style="color: #0003ff; hover:color: #0002e6;"
        >
          <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
          Back to Products
        </a>
      </div>

      <!-- Product Details Grid -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16">
        
        <!-- Product Image -->
        <div class="space-y-6">
          <div class="aspect-square overflow-hidden rounded-2xl bg-gray-100">
            <img 
              src={product.image}
              alt={product.name}
              class="w-full h-full object-cover"
              loading="eager"
            />
          </div>
          
          <!-- Category Info Card -->
          <div class="flex items-center space-x-4 p-4 bg-gray-50 rounded-xl">
            <img 
              src={category.image}
              alt={category.name}
              class="w-12 h-12 object-cover rounded-lg"
            />
            <div>
              <p class="text-sm font-medium text-gray-900">Category</p>
              <p class="text-sm text-gray-600">{category.name}</p>
            </div>
          </div>
        </div>

        <!-- Product Information -->
        <div class="space-y-8">
          
          <!-- Product Header -->
          <div>
            <h1 class="text-3xl lg:text-4xl font-bold text-gray-900 mb-4" style="font-family: 'Space Grotesk', sans-serif;">
              {product.name}
            </h1>
            
            <div class="flex items-center space-x-4 mb-6">
              <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800">
                Serial: {product.serialNumber}
              </span>
              {product.variations && product.variations.length > 0 && (
                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                  {product.variations.length} {product.variations.length === 1 ? 'Variation' : 'Variations'}
                </span>
              )}
            </div>
            
            <p class="text-lg text-gray-600 leading-relaxed">
              {product.description}
            </p>
          </div>

          <!-- Product Variations -->
          {product.variations && product.variations.length > 0 && (
            <div class="space-y-6">
              <h2 class="text-xl font-bold mb-4" style="font-family: 'Space Grotesk', sans-serif; color: rgb(238, 159, 32);">
                Product Variations
              </h2>
              
              <div class="space-y-4">
                {product.variations.map((variation, index) => (
                  <div class="rounded-xl p-6 bg-gray-50" style="border: 1px solid #0003ff;">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4" style="font-family: 'Space Grotesk', sans-serif;">
                      {variation.name}
                    </h3>
                    
                    {variation.attributes && variation.attributes.length > 0 && (
                      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        {variation.attributes.map((attribute, attrIndex) => (
                          <div class="flex justify-between items-center py-3 px-4 bg-white rounded-lg">
                            <span class="text-sm font-medium text-gray-600">
                              {attribute.title}
                            </span>
                            <span class="text-sm text-gray-900 font-semibold">
                              {attribute.value}
                            </span>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          <!-- Action Buttons -->
          <div class="space-y-4">
            <button 
              class="w-full text-white px-8 py-4 rounded-xl font-semibold focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors duration-200"
              style="background-color: #0003ff; hover:background-color: #0002e6; focus:ring-color: #0003ff;"
              onclick="openContactModal()"
            >
              Request Information
            </button>
            
            <a 
              href="/request-catalogue"
              class="w-full inline-flex items-center justify-center px-8 py-4 rounded-xl font-semibold text-gray-700 bg-white focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors duration-200"
              style="border: 1px solid #0003ff; hover:background-color: #f8f9ff; focus:ring-color: #0003ff;"
            >
              Download Catalogue
            </a>
          </div>

          <!-- Additional Information -->
          <div class="bg-blue-50 rounded-xl p-6">
            <h3 class="text-lg font-semibold text-blue-900 mb-3" style="font-family: 'Space Grotesk', sans-serif;">
              Training Applications
            </h3>
            <p class="text-blue-800 text-sm leading-relaxed">
              This medical equipment is designed for professional healthcare training environments. 
              Perfect for medical schools, nursing programs, and continuing education facilities. 
              Meets international quality standards for educational use.
            </p>
          </div>
        </div>
      </div>

      <!-- Related Products Section -->
      <div class="border-t border-gray-200 pt-16">
        <div class="mb-12">
          <h2 class="text-3xl font-bold text-gray-900 mb-4" style="font-family: 'Space Grotesk', sans-serif; color: rgb(238, 159, 32);">
            More from {category.name}
          </h2>
          <p class="text-lg text-gray-600">
            Explore other products in this category
          </p>
        </div>

        <!-- Related Products Grid -->
        {relatedProducts.length > 0 ? (
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {relatedProducts.map((relatedProduct) => (
            <ProductCard product={relatedProduct} />
          ))}
        </div>
        ) : (
          <div class="text-center py-12 text-gray-500">
            <p class="text-lg">No other products available in this category yet.</p>
          </div>
        )}

        <!-- View All Category Products -->
        <div class="text-center mt-12">
          <a 
            href={`/products#${category.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')}`}
            class="inline-flex items-center px-8 py-3 text-white font-semibold rounded-xl transition-colors duration-200"
            style="background-color: #0003ff; hover:background-color: #0002e6;"
          >
            View All {category.name}
            <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Include Contact Modal Component -->
  <ContactModal product={product} />

  <Footer />
</Layout>

<!-- Add data attributes for the modal to access product info -->
<div style="display: none;">
  <span data-product-name>{product.name}</span>
  <span data-product-serial>{product.serialNumber}</span>
</div>