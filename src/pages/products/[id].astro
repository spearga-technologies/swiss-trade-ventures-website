---
export const prerender = false;

export async function getStaticPaths() {
  return [];
}

import Layout from '../../layouts/Layout.astro';
import Navbar from '../../components/Navbar.astro';
import Footer from '../../components/Footer.astro';
import ContactModal from '../../components/ContactModal.astro';

// For dynamic loading, we'll handle the product fetching client-side
// This page will be a dynamic route that loads data on the client
---

<Layout 
  title="Product Details - Medical Equipment | Swiss Trade Ventures"
  description="View detailed specifications and information about our premium medical equipment products."
>
  <Navbar />
  
  <!-- Main Product Detail Content -->
  <div class="min-h-screen bg-white pt-48 lg:pt-40 pb-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <!-- Loading State -->
      <div id="loadingState" class="text-center py-16">
        <div class="inline-flex items-center px-6 py-3 rounded-full" style="background-color: #f0f4ff;">
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" style="color: #0003ff;">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <span class="font-medium" style="color: #0003ff;">Loading product details...</span>
        </div>
      </div>

      <!-- Product Content Container -->
      <div id="productContent" class="hidden">
        <!-- Content will be loaded dynamically -->
      </div>

      <!-- Error State -->
      <div id="errorState" class="text-center py-16 hidden">
        <div class="max-w-md mx-auto">
          <svg class="mx-auto h-16 w-16 text-gray-300 mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <h3 class="text-lg font-semibold text-gray-900 mb-2">Product not found</h3>
          <p class="text-gray-600 mb-4">The product you're looking for doesn't exist or couldn't be loaded.</p>
          <a href="/products" class="px-6 py-2 text-white rounded-lg transition-colors" style="background-color: #0003ff; hover:background-color: #0002e6;">
            Back to Products
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Contact Modal Component -->
  <ContactModal product={{
    id: "dynamic-product",
    name: "Loading...",
    serialNumber: "...",
    image: "https://images.pexels.com/photos/4386467/pexels-photo-4386467.jpeg?auto=compress&cs=tinysrgb&w=800",
    category: "Medical Equipment"
  }} />

  <Footer />
</Layout>

<!-- Dynamic Loading Script -->
<script>
import { getProductById, getCategoryById, getProductsByCategory } from '../../lib/firestore.js';

// Get product ID from URL
const productId = window.location.pathname.split('/').pop();
let currentProduct = null;
let currentCategory = null;
let relatedProducts = [];

// Initialize dynamic loading
document.addEventListener('DOMContentLoaded', async function() {
  console.log('üöÄ Loading product:', productId);
  
  try {
    // Show loading state
    showLoadingState();
    
    // Fetch all data concurrently for better performance
    const [productData] = await Promise.all([
      getProductById(productId)
    ]);
    
    currentProduct = productData;
    console.log('üì¶ Loaded product:', currentProduct);
    
    // Fetch category and related products concurrently if category exists
    if (currentProduct.category) {
      const [categoryData, relatedProductsData] = await Promise.all([
        getCategoryById(currentProduct.category),
        getProductsByCategory(currentProduct.category)
      ]);
      
      currentCategory = categoryData;
      relatedProducts = relatedProductsData.filter(p => p.id !== productId).slice(0, 3);
      console.log('üìÇ Loaded category:', currentCategory);
      console.log('üîó Loaded related products:', relatedProducts.length);
    }
    
    // Render the product page
    renderProductPage();
    
    // Hide loading, show content
    hideLoadingState();
    showProductContent();
    
    // Update page title and meta
    updatePageMeta();
    
  } catch (error) {
    console.error('‚ùå Error loading product:', error);
    showErrorState();
  }
});

function showLoadingState() {
  document.getElementById('loadingState').classList.remove('hidden');
  document.getElementById('productContent').classList.add('hidden');
  document.getElementById('errorState').classList.add('hidden');
}

function hideLoadingState() {
  document.getElementById('loadingState').classList.add('hidden');
}

function showProductContent() {
  document.getElementById('productContent').classList.remove('hidden');
}

function showErrorState() {
  document.getElementById('loadingState').classList.add('hidden');
  document.getElementById('productContent').classList.add('hidden');
  document.getElementById('errorState').classList.remove('hidden');
}

function updatePageMeta() {
  if (currentProduct) {
    document.title = `${currentProduct.name} - Medical Equipment | Swiss Trade Ventures`;
    
    // Update meta description
    const metaDescription = document.querySelector('meta[name="description"]');
    if (metaDescription) {
      metaDescription.content = `${currentProduct.description} - Professional medical equipment with serial number ${currentProduct.serialNumber}. View detailed specifications and training applications.`;
    }
  }
}

function renderProductPage() {
  const productContent = document.getElementById('productContent');
  
  productContent.innerHTML = `
    <!-- Breadcrumb Navigation -->
    <nav class="mb-8" aria-label="Breadcrumb">
      <ol class="flex items-center space-x-3 text-sm">
        <li>
          <a href="/" class="text-gray-500 hover:text-gray-700 transition-colors duration-300 font-medium">
            Home
          </a>
        </li>
        <li class="flex items-center">
          <svg class="w-4 h-4 text-gray-300 mx-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
          <a href="/products" class="text-gray-500 hover:text-gray-700 transition-colors duration-300 font-medium">
            Products
          </a>
        </li>
        ${currentCategory ? `
        <li class="flex items-center">
          <svg class="w-4 h-4 text-gray-300 mx-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
          <span class="text-gray-500">${currentCategory.name}</span>
        </li>
        ` : ''}
        <li class="flex items-center">
          <svg class="w-4 h-4 text-gray-300 mx-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
          <span class="text-gray-900 font-semibold">${currentProduct.name}</span>
        </li>
      </ol>
    </nav>

    <!-- Back to Products Link -->
    <div class="mb-8">
      <a 
        href="/products" 
        class="inline-flex items-center text-sm font-medium transition-colors duration-200"
        style="color: #0003ff; hover:color: #0002e6;"
      >
        <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to Products
      </a>
    </div>

    <!-- Product Details Grid -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16">
      
      <!-- Product Image -->
      <div class="space-y-6">
        <div class="aspect-square overflow-hidden rounded-2xl bg-gray-100">
          <img 
            src="${currentProduct.image}"
            alt="${currentProduct.name}"
            class="w-full h-full object-cover"
            loading="eager"
          />
        </div>
        
        ${currentCategory ? `
        <!-- Category Info Card -->
        <div class="flex items-center space-x-4 p-4 bg-gray-50 rounded-xl">
          <img 
            src="${currentCategory.image}"
            alt="${currentCategory.name}"
            class="w-12 h-12 object-cover rounded-lg"
          />
          <div>
            <p class="text-sm font-medium text-gray-900">Category</p>
            <p class="text-sm text-gray-600">${currentCategory.name}</p>
          </div>
        </div>
        ` : ''}
      </div>

      <!-- Product Information -->
      <div class="space-y-8">
        
        <!-- Product Header -->
        <div>
          <h1 class="text-3xl lg:text-4xl font-bold text-gray-900 mb-4" style="font-family: 'Space Grotesk', sans-serif;">
            ${currentProduct.name}
          </h1>
          
          <div class="flex items-center space-x-4 mb-6">
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800">
              Serial: ${currentProduct.serialNumber}
            </span>
            ${currentProduct.variations && currentProduct.variations.length > 0 ? `
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium text-white" style="background-color: #0003ff;">
              ${currentProduct.variations.length} ${currentProduct.variations.length === 1 ? 'Variation' : 'Variations'}
            </span>
            ` : ''}
          </div>
          
          <p class="text-lg text-gray-600 leading-relaxed">
            ${currentProduct.description}
          </p>
        </div>

        <!-- Action Buttons -->
        <div class="space-y-4">
          <button 
            class="w-full text-white px-8 py-4 rounded-xl font-semibold focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors duration-200"
            style="background-color: #0003ff; hover:background-color: #0002e6; focus:ring-color: #0003ff;"
            onclick="window.openContactModal()"
          >
            Request Information
          </button>
          
          <a 
            href="/request-catalogue"
            class="w-full inline-flex items-center justify-center px-8 py-4 rounded-xl font-semibold text-gray-700 bg-white focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors duration-200"
            style="border: 1px solid #0003ff; hover:background-color: #f8f9ff; focus:ring-color: #0003ff;"
          >
            Download Catalogue
          </a>
        </div>

        ${renderVariationIndicator()}

        <!-- Additional Information -->
        <div class="rounded-xl p-6" style="background-color: #f0f4ff;">
          <h3 class="text-lg font-semibold mb-3" style="font-family: 'Space Grotesk', sans-serif; color: black;">
            We're open to talk with you.
          </h3>
          <p class="text-sm leading-relaxed" style="color: black;">
            This medical equipment is designed for professional healthcare environments. 
            Images shown may be different from actual product variants. Please contact us for latest images and detailed specifications.
          </p>
        </div>
      </div>
    </div>

    ${renderProductVariations()}

    ${renderRelatedProducts()}
  `;
  
  // Update the ContactModal with real product data
  updateContactModalWithProductData();
  
  // Setup variations scroll functionality
  setupVariationsScroll();
}

function renderVariationIndicator() {
  if (!currentProduct.variations || currentProduct.variations.length === 0) {
    return '';
  }
  
  return `
    <!-- Variation Indicator Box -->
    <div class="mt-6 p-4 rounded-xl border" style="border-color: #0003ff;">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-3">
          <div class="w-10 h-10 rounded-full flex items-center justify-center" style="background-color: #f0f4ff;">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="color: #0003ff;">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
          </div>
          <div>
            <h4 class="text-sm font-bold" style="font-family: 'Space Grotesk', sans-serif; color: black;">
              Product Variations Available
            </h4>
            <p class="text-xs" style="color: black;">
              ${currentProduct.variations.length} different specification${currentProduct.variations.length !== 1 ? 's' : ''} available
            </p>
          </div>
        </div>
        <div class="flex items-center space-x-2">
          <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-bold text-white" style="background-color: #0003ff;">
            ${currentProduct.variations.length}
          </span>
          <button 
            onclick="document.getElementById('variationsContainer').scrollIntoView({ behavior: 'smooth', block: 'start' })"
            class="text-xs font-semibold transition-colors duration-200 flex items-center space-x-1"
            style="color: black; hover:color: #0002e6;"
          >
            <span>View Details</span>
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  `;
}

function renderProductVariations() {
  if (!currentProduct.variations || currentProduct.variations.length === 0) {
    return '';
  }
  
  const variationsHtml = currentProduct.variations.map((variation, index) => {
    // Limit to maximum 3 attributes per variation
    const limitedAttributes = variation.attributes ? variation.attributes.slice(0, 3) : [];
    
    return `
    <div class="flex-shrink-0 w-72 bg-white rounded-xl border border-gray-200 overflow-hidden transition-all duration-300 group" style="hover:border-color: #0003ff; hover:transform: translateY(-2px);">
      <!-- Variation Header -->
      <div class="p-4 pb-3" style="background: linear-gradient(to right, #f0f4ff, #e6f0ff);">
        <h3 class="text-lg font-bold text-gray-900 mb-2" style="font-family: 'Space Grotesk', sans-serif;">
          ${variation.name}
        </h3>
        <div class="flex items-center text-sm text-gray-600">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="color: #0003ff;">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span>${limitedAttributes.length} Specification${limitedAttributes.length !== 1 ? 's' : ''}</span>
        </div>
      </div>
      
      <!-- Variation Attributes -->
      <div class="p-4 pt-3">
        ${limitedAttributes.length > 0 ? `
        <div class="space-y-3">
          ${limitedAttributes.map(attribute => `
          <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg transition-colors duration-200 hover:bg-gray-100">
            <div class="flex items-center space-x-3">
              <div class="w-2 h-2 rounded-full" style="background-color: #0003ff;"></div>
              <span class="text-sm font-semibold text-gray-700">
                ${attribute.title}
              </span>
            </div>
            <span class="text-xs text-gray-900 font-bold px-2 py-1 bg-white rounded-full border">
              ${attribute.value}
            </span>
          </div>
          `).join('')}
        </div>
        ` : `
        <div class="text-center py-6 text-gray-500">
          <svg class="mx-auto h-8 w-8 text-gray-300 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          <p class="text-sm">No specifications available</p>
        </div>
        `}
        
        <!-- Variation Footer -->
        <div class="mt-4 pt-3 border-t border-gray-100">
          <div class="flex items-center justify-center">
            <span class="text-xs font-medium text-gray-500 bg-gray-100 px-3 py-1 rounded-full">
              Variation ${index + 1}
            </span>
          </div>
        </div>
      </div>
    </div>
    `;
  }).join('');
  
  return `
    <!-- Product Variations Section -->
    <div class="border-t border-gray-200 pt-12 mb-12">
      <div class="mb-8">
        <h2 class="text-2xl font-bold text-gray-900 mb-3" style="font-family: 'Space Grotesk', sans-serif; color: rgb(238, 159, 32);">
          Product Variations
        </h2>
        <p class="text-base text-gray-600">
          Explore different specifications and configurations available for this product
        </p>
      </div>

      <!-- Horizontal Scrollable Variations -->
      <div class="relative">
        <!-- Scroll Indicators -->
        <button 
          class="variations-scroll-btn scroll-left absolute left-0 top-1/2 -translate-y-1/2 z-10 w-10 h-10 bg-white rounded-full border border-gray-200 flex items-center justify-center text-gray-600 hover:text-white transition-all duration-200 opacity-0 shadow-md"
          style="hover:background-color: #0003ff; hover:border-color: #0003ff;"
          data-target="variationsContainer"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
        </button>
        
        <button 
          class="variations-scroll-btn scroll-right absolute right-0 top-1/2 -translate-y-1/2 z-10 w-10 h-10 bg-white rounded-full border border-gray-200 flex items-center justify-center text-gray-600 hover:text-white transition-all duration-200 shadow-md"
          style="hover:background-color: #0003ff; hover:border-color: #0003ff;"
          data-target="variationsContainer"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </button>

        <!-- Variations Container -->
        <div 
          id="variationsContainer"
          class="variations-scroll flex gap-4 overflow-x-auto pb-4 px-2 scroll-smooth"
          style="scrollbar-width: none; -ms-overflow-style: none;"
        >
          ${variationsHtml}
        </div>
      </div>

      <!-- Variations Summary -->
      <div class="mt-6 text-center">
        <div class="inline-flex items-center px-4 py-2 rounded-full" style="background-color: #f0f4ff;">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="color: #0003ff;">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span class="font-medium text-sm" style="color: #0003ff;">
            ${currentProduct.variations.length} variation${currentProduct.variations.length !== 1 ? 's' : ''} available for this product
          </span>
        </div>
      </div>
    </div>
  `;
}

// Setup variations scroll functionality
function setupVariationsScroll() {
  const scrollButtons = document.querySelectorAll('.variations-scroll-btn');
  
  scrollButtons.forEach(button => {
    button.addEventListener('click', function() {
      const targetId = this.getAttribute('data-target');
      const container = document.getElementById(targetId);
      const scrollAmount = 320;
      
      if (this.classList.contains('scroll-left')) {
        container.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
      } else {
        container.scrollBy({ left: scrollAmount, behavior: 'smooth' });
      }
    });
  });

  // Update scroll button visibility
  const variationsContainer = document.getElementById('variationsContainer');
  
  if (variationsContainer) {
    const leftBtn = document.querySelector('.variations-scroll-btn.scroll-left');
    const rightBtn = document.querySelector('.variations-scroll-btn.scroll-right');
    
    function updateVariationsScrollButtons() {
      const { scrollLeft, scrollWidth, clientWidth } = variationsContainer;
      
      if (scrollLeft > 0) {
        leftBtn.style.opacity = '1';
      } else {
        leftBtn.style.opacity = '0';
      }
      
      if (scrollLeft + clientWidth < scrollWidth - 10) {
        rightBtn.style.opacity = '1';
      } else {
        rightBtn.style.opacity = '0';
      }
    }
    
    variationsContainer.addEventListener('scroll', updateVariationsScrollButtons);
    
    // Initial check
    setTimeout(updateVariationsScrollButtons, 100);
  }
}

function renderRelatedProducts() {
  if (!relatedProducts || relatedProducts.length === 0) {
    return `
      <!-- Related Products Section -->
      <div class="border-t border-gray-200 pt-12">
        <div class="mb-12">
          <h2 class="text-3xl font-bold text-gray-900 mb-4" style="font-family: 'Space Grotesk', sans-serif; color: rgb(238, 159, 32);">
            More from ${currentCategory ? currentCategory.name : 'this category'}
          </h2>
          <p class="text-lg text-gray-600">
            Explore other products in this category
          </p>
        </div>
        
        <div class="text-center py-12 text-gray-500">
          <p class="text-lg">No other products available in this category yet.</p>
        </div>
      </div>
    `;
  }
  
  const relatedProductsHtml = relatedProducts.map(product => `
    <div class="bg-white rounded-2xl border border-gray-200 overflow-hidden transition-all duration-300 group" style="hover:border-color: #0003ff;">
      <div class="aspect-square w-full h-48 overflow-hidden bg-gray-50">
        <img 
          src="${product.image}"
          alt="${product.name}"
          class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
          loading="lazy"
        />
      </div>
      
      <div class="p-6">
        <h3 class="text-lg font-bold text-gray-900 leading-tight mb-3" style="font-family: 'Space Grotesk', sans-serif;">
          ${product.name}
        </h3>
        
        <p class="text-sm text-gray-600 leading-relaxed mb-4">
          ${product.description}
        </p>
        
        <div class="flex items-center justify-between mb-4">
          <span class="text-xs font-medium text-gray-500 bg-gray-100 px-3 py-1 rounded-full">
            Serial: ${product.serialNumber}
          </span>
        </div>
        
        <a 
          href="/products/${product.id}"
          class="inline-flex items-center justify-center w-full px-4 py-3 text-white text-sm font-semibold rounded-xl transition-all duration-200"
          style="background-color: #0003ff; hover:background-color: #0002e6; font-family: 'Space Grotesk', sans-serif;"
        >
          View Specifications
          <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </a>
      </div>
    </div>
  `).join('');
  
  return `
    <!-- Related Products Section -->
    <div class="border-t border-gray-200 pt-12">
      <div class="mb-12">
        <h2 class="text-3xl font-bold text-gray-900 mb-4" style="font-family: 'Space Grotesk', sans-serif; color: rgb(238, 159, 32);">
          More from ${currentCategory ? currentCategory.name : 'this category'}
        </h2>
        <p class="text-lg text-gray-600">
          Explore other products in this category
        </p>
      </div>

      <!-- Related Products Grid -->
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        ${relatedProductsHtml}
      </div>

      <!-- View All Category Products -->
      ${currentCategory ? `
      <div class="text-center mt-12">
        <a 
          href="/products#${currentCategory.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')}"
          class="inline-flex items-center px-8 py-3 text-white font-semibold rounded-xl transition-colors duration-200"
          style="background-color: #0003ff; hover:background-color: #0002e6;"
        >
          View All ${currentCategory.name}
          <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </a>
      </div>
      ` : ''}
    </div>
  `;
}
function updateContactModalWithProductData() {
  // Update product info in the ContactModal component
  const productImage = document.querySelector('#contactModal .p-4.bg-gray-50 img');
  const productName = document.querySelector('#contactModal .font-bold.text-gray-900.text-lg');
  const productSerial = document.querySelector('#contactModal .text-sm.text-gray-600');
  const productCategory = document.querySelector('#contactModal .text-xs.text-gray-500');
  
  if (productImage && currentProduct) {
    productImage.src = currentProduct.image;
    productImage.alt = currentProduct.name;
  }
  
  if (productName && currentProduct) {
    productName.textContent = currentProduct.name;
  }
  
  if (productSerial && currentProduct) {
    productSerial.textContent = `Serial: ${currentProduct.serialNumber}`;
  }
  
  if (productCategory && currentCategory) {
    productCategory.textContent = currentCategory.name;
  }
  
  // Update message field with product info
  const messageField = document.getElementById('contactMessage');
  if (messageField && currentProduct) {
    messageField.value = `I'm interested in learning more about ${currentProduct.name}${currentProduct.serialNumber ? ` (Serial: ${currentProduct.serialNumber})` : ''}. Please provide additional information about pricing, availability, and technical specifications.`;
  }
}

</script>

<!-- Enhanced Styles -->
<style>
/* Loading animation */
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.animate-spin {
  animation: spin 1s linear infinite;
}

/* Modal animations */
.modal-content {
  transform: scale(0.95);
  opacity: 0;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Button hover effects */
button:hover, a:hover {
  transform: translateY(-1px);
}

/* Product card hover effects */
.group:hover {
  transform: translateY(-2px);
}

/* Accessibility improvements */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}
</style>