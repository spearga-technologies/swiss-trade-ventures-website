---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import CategorySection from '../components/CategorySection.astro';
import { groupProductsByCategory } from '../lib/firestore.js';

// Fetch real data from Firestore at build time with error handling
let categories = [];
let categorizedProducts = {};

try {
  console.log("Fetching data for products page...");
  
  // Direct call to groupProductsByCategory with better error handling
  const data = await groupProductsByCategory();
  
  categories = data.categories;
  categorizedProducts = data.categorizedProducts;
  
  console.log("Products page data loaded:");
  console.log("Categories:", categories.length);
  console.log("Category IDs:", categories.map(c => c.id));
  console.log("Products by category:", Object.keys(categorizedProducts));
  
} catch (error) {
  console.error("Error fetching data for products page:", error);
  console.error("Using hardcoded fallback data");
  
  categories = [{
    id: "demo-category",
    name: "Demo Category",
    description: "Demo category for testing",
    image: "https://images.pexels.com/photos/4386467/pexels-photo-4386467.jpeg?auto=compress&cs=tinysrgb&w=800"
  }];
  categorizedProducts = {
    "demo-category": {
      category: categories[0],
      products: [{
        id: "demo-product", 
        name: "Demo Product",
        description: "Demo product for testing purposes",
        serialNumber: "DEMO001",
        image: "https://images.pexels.com/photos/4386467/pexels-photo-4386467.jpeg?auto=compress&cs=tinysrgb&w=800",
        variations: []
      }]
    }
  };
}

// Generate category anchors for navigation
const categoryAnchors = categories.map(cat => ({
  id: cat.id,
  name: cat.name,
  anchor: cat.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, ''),
  productCount: categorizedProducts[cat.id]?.products?.length || 0
}));

// Calculate total products
const totalProducts = Object.values(categorizedProducts).reduce((total, cat) => total + cat.products.length, 0);
---

<Layout 
  title="Medical Equipment Products - Swiss Trade Ventures" 
  description="Explore our comprehensive range of premium medical equipment and training products. Professional healthcare solutions for medical training institutions worldwide."
>
  <Navbar />
  
  <!-- Main Products Layout -->
  <div class="min-h-screen bg-white">
    <div class="relative">
      
      <!-- Left Sidebar - Fixed Categories Index -->
      <aside class="fixed left-0 top-32 w-80 z-30 p-6 h-[calc(100vh-8rem)] overflow-y-auto hidden lg:block">
        <div class="bg-white/95 backdrop-blur-md rounded-3xl p-6" style="border: 1px solid #0003ff;">
          <!-- Sidebar Header -->
          <div class="mb-8">
            <h2 class="text-xl font-bold text-gray-900 mb-2" style="font-family: 'Space Grotesk', sans-serif;">
              Product Categories
            </h2>
            <p class="text-sm text-gray-600">
              Browse our medical equipment categories
            </p>
          </div>

          <!-- Categories Navigation -->
          <nav class="space-y-2" aria-label="Product categories">
            {categoryAnchors.map((category) => (
              <a 
                href={`#${category.anchor}`}
                class="category-nav-item group flex items-center justify-between p-3 rounded-xl text-gray-700 hover:text-white transition-all duration-200 border border-transparent"
                style="hover:background-color: #0003ff; hover:border-color: #0003ff;"
                data-category={category.anchor}
              >
                <span class="text-sm font-medium truncate pr-2">{category.name}</span>
                <span class="flex-shrink-0 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-600 group-hover:bg-white group-hover:text-gray-900 transition-colors duration-200">
                  {category.productCount}
                </span>
              </a>
            ))}
          </nav>

        </div>
      </aside>

      <!-- Mobile Categories Toggle -->
      <!-- Mobile Bottom Navigation Bar -->
      <div class="lg:hidden fixed bottom-0 left-0 right-0 z-40 bg-white/95 backdrop-blur-md border-t" style="border-color: #0003ff;">
        <div class="px-4 py-3">
          <div class="flex gap-2 overflow-x-auto pb-2" style="scrollbar-width: none;">
            {categoryAnchors.map((category) => (
              <a 
                href={`#${category.anchor}`}
                class="mobile-bottom-nav-item flex-shrink-0 px-4 py-2 bg-white rounded-full text-sm font-medium text-gray-700 hover:text-white transition-all duration-200"
                style="border: 1px solid #0003ff;"
                data-category={category.anchor}
              >
                {category.name}
              </a>
            ))}
          </div>
        </div>
      </div>

      <!-- Mobile Categories Overlay -->
      <div id="mobileCategories" class="lg:hidden fixed inset-0 z-50 hidden">
        <div class="absolute inset-0 bg-black/50 backdrop-blur-sm" id="mobileOverlay"></div>
        <div class="absolute left-0 top-0 w-80 h-full bg-white/95 backdrop-blur-md p-6 transform -translate-x-full transition-transform duration-300" id="mobileCategoriesPanel">
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-xl font-bold text-gray-900" style="font-family: 'Space Grotesk', sans-serif;">
              Categories
            </h2>
            <button id="closeMobileCategories" class="p-2 text-gray-500 hover:text-gray-700">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <!-- Mobile Categories Navigation -->
          <nav class="space-y-2" aria-label="Product categories">
            {categoryAnchors.map((category) => (
              <a 
                href={`#${category.anchor}`}
                class="mobile-category-nav-item group flex items-center justify-between p-3 rounded-xl text-gray-700 hover:text-blue-600 hover:bg-blue-50 transition-all duration-200 border border-transparent hover:border-blue-200"
                data-category={category.anchor}
              >
                <span class="text-sm font-medium truncate pr-2">{category.name}</span>
                <span class="flex-shrink-0 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-600 group-hover:bg-blue-100 group-hover:text-blue-700 transition-colors duration-200">
                  {category.productCount}
                </span>
              </a>
            ))}
          </nav>
        </div>
      </div>

      <!-- Main Content Area -->
      <main class="min-h-screen lg:ml-80">
        <div class="px-6 lg:px-12 py-8 pt-48 lg:pt-40 pb-20 lg:pb-8">
          
          <!-- Page Header -->
          <div class="mb-8 lg:mb-12">
            <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-3xl p-8 lg:p-12" style="border: 1px solid #0003ff;">
              <h1 class="text-3xl lg:text-5xl font-bold text-gray-900 mb-6 leading-tight" style="font-family: 'Space Grotesk', sans-serif;">
                Medical Equipment Products
              </h1>
              <p class="text-lg lg:text-xl text-gray-600 max-w-4xl leading-relaxed mb-8">
                Discover our comprehensive range of premium medical equipment designed for professional healthcare training and education. Each product meets international quality standards and comes with detailed specifications for optimal learning experiences.
              </p>
            </div>
          </div>

          <!-- Quick Navigation Pills (Mobile) -->
          <!-- Removed Quick Navigation Pills as we now have bottom nav -->

          <!-- Categories and Products -->
          <div class="space-y-12 lg:space-y-16">
            {Object.entries(categorizedProducts).map(([categoryId, categoryData]) => (
              <CategorySection 
                category={categoryData.category} 
                products={categoryData.products} 
              />
            ))}
          </div>
        </div>
      </main>
    </div>
  </div>

  <Footer />
</Layout>

<!-- Enhanced JavaScript for Premium Interactions -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Mobile bottom navigation
  const mobileBottomNavItems = document.querySelectorAll('.mobile-bottom-nav-item');
  mobileBottomNavItems.forEach(item => {
    item.addEventListener('click', function(e) {
      e.preventDefault();
      const targetId = this.getAttribute('href').substring(1);
      const targetSection = document.getElementById(targetId);
      
      if (targetSection) {
        // Update active state for mobile nav
        mobileBottomNavItems.forEach(nav => {
          nav.style.backgroundColor = 'white';
          nav.style.color = '#374151';
        });
        this.style.backgroundColor = '#0003ff';
        this.style.color = 'white';
        
        targetSection.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    });
  });

  // Smooth scrolling for category navigation
  const categoryNavItems = document.querySelectorAll('.category-nav-item');
  const categorySection = document.querySelectorAll('.category-section');
  
  // Category navigation with active state
  categoryNavItems.forEach(item => {
    item.addEventListener('click', function(e) {
      e.preventDefault();
      const targetId = this.getAttribute('href').substring(1);
      const targetSection = document.getElementById(targetId);
      
      if (targetSection) {
        // Update active state
        categoryNavItems.forEach(nav => nav.classList.remove('active'));
        this.classList.add('active');
        
        // Smooth scroll to section
        targetSection.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
        
        // Update URL without triggering scroll
        history.pushState(null, null, `#${targetId}`);
      }
    });
  });

  // Intersection Observer for active category highlighting
  const observerOptions = {
    root: null,
    rootMargin: '-20% 0px -70% 0px',
    threshold: 0
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const categoryId = entry.target.getAttribute('data-category');
        
        // Update active navigation item
        categoryNavItems.forEach(nav => {
          nav.classList.remove('active');
          if (nav.getAttribute('data-category') === categoryId) {
            nav.classList.add('active');
          }
        });
      }
    });
  }, observerOptions);

  // Observe all category sections
  categorySection.forEach(section => {
    observer.observe(section);
  });

  // Horizontal scroll functionality for products
  const scrollButtons = document.querySelectorAll('.scroll-btn');
  
  scrollButtons.forEach(button => {
    button.addEventListener('click', function() {
      const targetId = this.getAttribute('data-target');
      const container = document.getElementById(targetId);
      const scrollAmount = 320; // Width of one product card + gap
      
      if (this.classList.contains('scroll-left')) {
        container.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
      } else {
        container.scrollBy({ left: scrollAmount, behavior: 'smooth' });
      }
    });
  });

  // Show/hide scroll buttons based on scroll position
  const productsContainers = document.querySelectorAll('.products-scroll');
  
  productsContainers.forEach(container => {
    const categoryId = container.id.replace('products-', '');
    const leftBtn = document.querySelector(`.scroll-left[data-target="products-${categoryId}"]`);
    const rightBtn = document.querySelector(`.scroll-right[data-target="products-${categoryId}"]`);
    
    function updateScrollButtons() {
      const { scrollLeft, scrollWidth, clientWidth } = container;
      
      // Show/hide left button
      if (scrollLeft > 0) {
        leftBtn.style.opacity = '1';
      } else {
        leftBtn.style.opacity = '0';
      }
      
      // Show/hide right button
      if (scrollLeft + clientWidth < scrollWidth - 10) {
        rightBtn.style.opacity = '1';
      } else {
        rightBtn.style.opacity = '0';
      }
    }
    
    container.addEventListener('scroll', updateScrollButtons);
    updateScrollButtons(); // Initial check
  });

  // Handle initial hash in URL
  if (window.location.hash) {
    const targetId = window.location.hash.substring(1);
    const targetSection = document.getElementById(targetId);
    if (targetSection) {
      setTimeout(() => {
        targetSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }, 100);
    }
  }

  // Image lazy loading optimization
  const images = document.querySelectorAll('img[loading="lazy"]');
  
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.classList.add('fade-in');
          imageObserver.unobserve(img);
        }
      });
    });
    
    images.forEach(img => imageObserver.observe(img));
  }

  // Smooth scroll for quick navigation pills
  const quickNavPills = document.querySelectorAll('.lg\\:hidden a[href^="#"]');
  quickNavPills.forEach(pill => {
    pill.addEventListener('click', function(e) {
      e.preventDefault();
      const targetId = this.getAttribute('href').substring(1);
      const targetSection = document.getElementById(targetId);
      
      if (targetSection) {
        targetSection.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    });
  });
});
</script>

<!-- Enhanced Styles for Premium Design -->
<style>
/* Hide scrollbars for horizontal scroll */
.products-scroll::-webkit-scrollbar,
.lg\:hidden .overflow-x-auto::-webkit-scrollbar {
  display: none;
}

/* Active category navigation state */
.category-nav-item.active {
  background-color: #0003ff !important;
  border-color: #0003ff !important;
  color: white !important;
}

.category-nav-item.active span:last-child {
  background-color: white !important;
  color: #0003ff !important;
}

/* Category nav hover effects */
.category-nav-item:hover {
  background-color: #0003ff !important;
  border-color: #0003ff !important;
  color: white !important;
}

.category-nav-item:hover span:last-child {
  background-color: white !important;
  color: #0003ff !important;
}

/* Mobile bottom nav scrollbar hide */
.mobile-bottom-nav-item::-webkit-scrollbar {
  display: none;
}

/* Smooth scroll behavior */
html {
  scroll-behavior: smooth;
}

/* Image fade-in animation */
.fade-in {
  animation: fadeIn 0.5s ease-in-out;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

/* Mobile categories panel animation */
#mobileCategoriesPanel {
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Premium gradient background */
.bg-gradient-to-r {
  background: linear-gradient(135deg, #f0f9ff 0%, #e0e7ff 100%);
}

/* Performance optimizations */
.product-card {
  contain: layout style paint;
}

.products-scroll {
  contain: layout style;
}

/* Accessibility improvements */
@media (prefers-reduced-motion: reduce) {
  html {
    scroll-behavior: auto;
  }
  
  .product-card {
    transition: none;
  }
  
  .scroll-btn {
    transition: none;
  }
  
  #mobileCategoriesPanel {
    transition: none;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .category-nav-item {
    border: 2px solid;
  }
  
  .product-card {
    border: 2px solid;
  }
}

/* Mobile responsive adjustments */
@media (max-width: 1023px) {
  .lg\:ml-80 {
    margin-left: 0 !important;
  }
}
</style>