---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import { groupProductsByCategory } from '../lib/firestore.js';

// Static generation - fetch data at build time
const { categories, categorizedProducts } = await groupProductsByCategory();

// Generate category anchors for navigation
const categoryAnchors = categories.map(cat => ({
  id: cat.id,
  name: cat.name,
  anchor: cat.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, ''),
  productCount: categorizedProducts[cat.id]?.products?.length || 0
}));
---

<Layout 
  title="Medical Equipment Products - Swiss Trade Ventures" 
  description="Explore our comprehensive range of premium medical equipment and training products. Professional healthcare solutions for medical training institutions worldwide."
>
  <Navbar />
  
  <!-- Breadcrumb Navigation -->
  <div class="bg-gray-50 border-b border-gray-200 pt-24 pb-4">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <nav class="flex" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-4">
          <li>
            <div>
              <a href="/" class="text-gray-400 hover:text-gray-500 transition-colors duration-200">
                <svg class="flex-shrink-0 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
                </svg>
                <span class="sr-only">Home</span>
              </a>
            </div>
          </li>
          <li>
            <div class="flex items-center">
              <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
              </svg>
              <span class="ml-4 text-sm font-medium text-gray-900">Products</span>
            </div>
          </li>
        </ol>
      </nav>
    </div>
  </div>

  <!-- Main Products Layout -->
  <div class="min-h-screen bg-white">
    <div class="flex">
      
      <!-- Left Sidebar - Fixed Categories Index (25% width) -->
      <aside class="fixed left-0 top-24 h-screen w-1/4 bg-white border-r border-gray-200 overflow-hidden z-30">
        <div class="p-6">
          <!-- Sidebar Header -->
          <div class="mb-8">
            <h2 class="text-xl font-bold text-gray-900 mb-2" style="font-family: 'Space Grotesk', sans-serif;">
              Product Categories
            </h2>
            <p class="text-sm text-gray-600">
              {categories.length} categories â€¢ {Object.values(categorizedProducts).reduce((total, cat) => total + cat.products.length, 0)} products
            </p>
          </div>

          <!-- Categories Navigation -->
          <nav class="space-y-2" aria-label="Product categories">
            {categoryAnchors.map((category) => (
              <a 
                href={`#${category.anchor}`}
                class="category-nav-item group flex items-center justify-between p-3 rounded-lg text-gray-700 hover:text-blue-600 hover:bg-blue-50 transition-all duration-200 border border-transparent hover:border-blue-200"
                data-category={category.anchor}
              >
                <span class="text-sm font-medium truncate pr-2">{category.name}</span>
                <span class="flex-shrink-0 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-600 group-hover:bg-blue-100 group-hover:text-blue-700 transition-colors duration-200">
                  {category.productCount}
                </span>
              </a>
            ))}
          </nav>

          <!-- Search Box -->
          <div class="mt-8 pt-6 border-t border-gray-200">
            <div class="relative">
              <input 
                type="text" 
                id="productSearch"
                placeholder="Search products..."
                class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
              >
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>
      </aside>

      <!-- Right Content Area (75% width) -->
      <main class="ml-1/4 w-3/4 min-h-screen">
        <div class="p-8">
          
          <!-- Page Header -->
          <div class="mb-12">
            <h1 class="text-4xl font-bold text-gray-900 mb-4" style="font-family: 'Space Grotesk', sans-serif;">
              Medical Equipment Products
            </h1>
            <p class="text-lg text-gray-600 max-w-3xl">
              Discover our comprehensive range of premium medical equipment designed for professional healthcare training and education. Each product meets international quality standards and comes with detailed specifications.
            </p>
          </div>

          <!-- Category Sections -->
          {Object.entries(categorizedProducts).map(([categoryId, categoryData]) => {
            const category = categoryData.category;
            const products = categoryData.products;
            const anchor = category.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
            
            return (
              <section 
                id={anchor}
                class="category-section mb-16 scroll-mt-8"
                data-category={anchor}
              >
                <!-- Category Header -->
                <div class="flex items-start gap-8 mb-8 p-6 bg-gray-50 rounded-2xl">
                  <!-- Category Image -->
                  <div class="flex-shrink-0">
                    <img 
                      src={category.image}
                      alt={category.name}
                      class="w-32 h-32 object-cover rounded-xl shadow-sm"
                      loading="lazy"
                    />
                  </div>
                  
                  <!-- Category Info -->
                  <div class="flex-1">
                    <h2 class="text-2xl font-bold text-gray-900 mb-3" style="font-family: 'Space Grotesk', sans-serif;">
                      {category.name}
                    </h2>
                    <p class="text-gray-600 mb-4 leading-relaxed">
                      {category.description}
                    </p>
                    <div class="flex items-center text-sm text-gray-500">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
                      </svg>
                      {products.length} {products.length === 1 ? 'product' : 'products'} available
                    </div>
                  </div>
                </div>

                <!-- Products Horizontal Scroll -->
                {products.length > 0 ? (
                  <div class="relative">
                    <!-- Scroll Indicators -->
                    <button 
                      class="scroll-btn scroll-left absolute left-0 top-1/2 -translate-y-1/2 z-10 w-10 h-10 bg-white rounded-full shadow-lg border border-gray-200 flex items-center justify-center text-gray-600 hover:text-blue-600 hover:border-blue-200 transition-all duration-200 opacity-0"
                      data-target={`products-${categoryId}`}
                    >
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                      </svg>
                    </button>
                    
                    <button 
                      class="scroll-btn scroll-right absolute right-0 top-1/2 -translate-y-1/2 z-10 w-10 h-10 bg-white rounded-full shadow-lg border border-gray-200 flex items-center justify-center text-gray-600 hover:text-blue-600 hover:border-blue-200 transition-all duration-200"
                      data-target={`products-${categoryId}`}
                    >
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                      </svg>
                    </button>

                    <!-- Products Container -->
                    <div 
                      id={`products-${categoryId}`}
                      class="products-scroll flex gap-6 overflow-x-auto pb-4 px-2 scroll-smooth"
                      style="scrollbar-width: none; -ms-overflow-style: none;"
                    >
                      {products.map((product) => (
                        <article class="product-card flex-shrink-0 w-80 bg-white rounded-xl border border-gray-200 overflow-hidden hover:shadow-lg hover:-translate-y-1 transition-all duration-300 group">
                          <!-- Product Image -->
                          <div class="aspect-square overflow-hidden bg-gray-100">
                            <img 
                              src={product.image}
                              alt={product.name}
                              class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                              loading="lazy"
                            />
                          </div>
                          
                          <!-- Product Info -->
                          <div class="p-6">
                            <h3 class="text-lg font-bold text-gray-900 mb-2 line-clamp-2" style="font-family: 'Space Grotesk', sans-serif;">
                              {product.name}
                            </h3>
                            
                            <p class="text-sm text-gray-600 mb-3 line-clamp-2">
                              {product.description}
                            </p>
                            
                            <div class="flex items-center justify-between mb-4">
                              <span class="text-sm font-medium text-gray-500">
                                Serial: {product.serialNumber}
                              </span>
                              {product.variations && product.variations.length > 0 && (
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-700">
                                  {product.variations.length} {product.variations.length === 1 ? 'variation' : 'variations'}
                                </span>
                              )}
                            </div>
                            
                            <!-- Action Button -->
                            <a 
                              href={`/products/${product.id}`}
                              class="inline-flex items-center justify-center w-full px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200"
                            >
                              View Specifications
                              <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                              </svg>
                            </a>
                          </div>
                        </article>
                      ))}
                    </div>
                  </div>
                ) : (
                  <div class="text-center py-12 text-gray-500">
                    <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-2.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 009.586 13H7"></path>
                    </svg>
                    <p>No products available in this category yet.</p>
                  </div>
                )}
              </section>
            );
          })}
        </div>
      </main>
    </div>
  </div>

  <Footer />
</Layout>

<!-- Enhanced JavaScript for Premium Interactions -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Smooth scrolling for category navigation
  const categoryNavItems = document.querySelectorAll('.category-nav-item');
  const categorySection = document.querySelectorAll('.category-section');
  
  // Category navigation with active state
  categoryNavItems.forEach(item => {
    item.addEventListener('click', function(e) {
      e.preventDefault();
      const targetId = this.getAttribute('href').substring(1);
      const targetSection = document.getElementById(targetId);
      
      if (targetSection) {
        // Update active state
        categoryNavItems.forEach(nav => nav.classList.remove('active'));
        this.classList.add('active');
        
        // Smooth scroll to section
        targetSection.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
        
        // Update URL without triggering scroll
        history.pushState(null, null, `#${targetId}`);
      }
    });
  });

  // Intersection Observer for active category highlighting
  const observerOptions = {
    root: null,
    rootMargin: '-20% 0px -70% 0px',
    threshold: 0
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const categoryId = entry.target.getAttribute('data-category');
        
        // Update active navigation item
        categoryNavItems.forEach(nav => {
          nav.classList.remove('active');
          if (nav.getAttribute('data-category') === categoryId) {
            nav.classList.add('active');
          }
        });
      }
    });
  }, observerOptions);

  // Observe all category sections
  categorySection.forEach(section => {
    observer.observe(section);
  });

  // Horizontal scroll functionality for products
  const scrollButtons = document.querySelectorAll('.scroll-btn');
  
  scrollButtons.forEach(button => {
    button.addEventListener('click', function() {
      const targetId = this.getAttribute('data-target');
      const container = document.getElementById(targetId);
      const scrollAmount = 320; // Width of one product card + gap
      
      if (this.classList.contains('scroll-left')) {
        container.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
      } else {
        container.scrollBy({ left: scrollAmount, behavior: 'smooth' });
      }
    });
  });

  // Show/hide scroll buttons based on scroll position
  const productsContainers = document.querySelectorAll('.products-scroll');
  
  productsContainers.forEach(container => {
    const categoryId = container.id.replace('products-', '');
    const leftBtn = document.querySelector(`.scroll-left[data-target="products-${categoryId}"]`);
    const rightBtn = document.querySelector(`.scroll-right[data-target="products-${categoryId}"]`);
    
    function updateScrollButtons() {
      const { scrollLeft, scrollWidth, clientWidth } = container;
      
      // Show/hide left button
      if (scrollLeft > 0) {
        leftBtn.style.opacity = '1';
      } else {
        leftBtn.style.opacity = '0';
      }
      
      // Show/hide right button
      if (scrollLeft + clientWidth < scrollWidth - 10) {
        rightBtn.style.opacity = '1';
      } else {
        rightBtn.style.opacity = '0';
      }
    }
    
    container.addEventListener('scroll', updateScrollButtons);
    updateScrollButtons(); // Initial check
  });

  // Product search functionality
  const searchInput = document.getElementById('productSearch');
  const productCards = document.querySelectorAll('.product-card');
  
  searchInput.addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase().trim();
    
    productCards.forEach(card => {
      const productName = card.querySelector('h3').textContent.toLowerCase();
      const productDescription = card.querySelector('p').textContent.toLowerCase();
      const serialNumber = card.querySelector('.text-gray-500').textContent.toLowerCase();
      
      const isMatch = productName.includes(searchTerm) || 
                     productDescription.includes(searchTerm) || 
                     serialNumber.includes(searchTerm);
      
      if (isMatch || searchTerm === '') {
        card.style.display = 'block';
        card.style.opacity = '1';
      } else {
        card.style.display = 'none';
        card.style.opacity = '0';
      }
    });
    
    // Show/hide category sections based on visible products
    categorySection.forEach(section => {
      const visibleProducts = section.querySelectorAll('.product-card[style*="display: block"], .product-card:not([style*="display: none"])');
      if (visibleProducts.length === 0 && searchTerm !== '') {
        section.style.display = 'none';
      } else {
        section.style.display = 'block';
      }
    });
  });

  // Handle initial hash in URL
  if (window.location.hash) {
    const targetId = window.location.hash.substring(1);
    const targetSection = document.getElementById(targetId);
    if (targetSection) {
      setTimeout(() => {
        targetSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }, 100);
    }
  }

  // Image lazy loading optimization
  const images = document.querySelectorAll('img[loading="lazy"]');
  
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.classList.add('fade-in');
          imageObserver.unobserve(img);
        }
      });
    });
    
    images.forEach(img => imageObserver.observe(img));
  }
});
</script>

<!-- Enhanced Styles for Premium Design -->
<style>
/* Hide scrollbars for horizontal scroll */
.products-scroll::-webkit-scrollbar {
  display: none;
}

/* Active category navigation state */
.category-nav-item.active {
  background-color: #dbeafe;
  border-color: #3b82f6;
  color: #1d4ed8;
}

.category-nav-item.active span:last-child {
  background-color: #3b82f6;
  color: white;
}

/* Smooth scroll behavior */
html {
  scroll-behavior: smooth;
}

/* Line clamp utilities */
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* Image fade-in animation */
.fade-in {
  animation: fadeIn 0.5s ease-in-out;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

/* Responsive design */
@media (max-width: 1024px) {
  aside {
    display: none;
  }
  
  main {
    margin-left: 0;
    width: 100%;
  }
}

/* Product card hover effects */
.product-card:hover {
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

/* Scroll button positioning */
.scroll-btn {
  transition: opacity 0.3s ease, transform 0.2s ease;
}

.scroll-btn:hover {
  transform: translateY(-50%) scale(1.05);
}

/* Category section spacing */
.category-section:last-child {
  margin-bottom: 0;
}

/* Search input focus state */
#productSearch:focus {
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

/* Performance optimizations */
.product-card {
  contain: layout style paint;
}

.products-scroll {
  contain: layout style;
}

/* Accessibility improvements */
@media (prefers-reduced-motion: reduce) {
  html {
    scroll-behavior: auto;
  }
  
  .product-card {
    transition: none;
  }
  
  .scroll-btn {
    transition: none;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .category-nav-item {
    border: 2px solid;
  }
  
  .product-card {
    border: 2px solid;
  }
}
</style>